<?php
namespace GalleryZip\Zipper;

require_once PLUGIN_BASE_PATH . '/classes/zipper.php';

/**
 * Test class for GalleryZip.
 * Generated by PHPUnit on 2013-05-16 at 10:06:41.
 * @covers GalleryZip\Zipper\Zipper
 */
class ZipperTest extends \WP_UnitTestCase
{
    /**
     * @var Zipper
     */
    protected $zipper;
    protected $testdir  = '';
    protected $testfile = '';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp() {
        $this->zipper = new Zipper();

        // create testdir
		$this->testdir = WP_CONTENT_DIR . '/testdir';
		$this->create_dir( $this->testdir );
		$this->fill_testdir( $this->testdir );

		// setup testfile name
		$this->testfile = WP_CONTENT_DIR . '/testzip.zip';
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    public function tearDown() {
    	if ( is_dir( $this->testdir ) )
    		$this->delete_dir( $this->testdir );

    	if ( file_exists( $this->testfile ) )
    		unlink( $this->testfile );
    }

    private function create_dir( $dir ) {
    	if ( is_dir( $dir ) )
    		$this->delete_dir( $dir );

    	$done = mkdir( $dir, 0777, true );
    	if ( empty( $done ) )
    		die( 'Could not create directory ' . $dir );

    }

    private function delete_dir( $dir ) {
    	if ( ! is_dir( $dir ) )
    		return false;

    	$dir = rtrim( $dir, '/' ) . '/';

		$files = glob( $dir . '*', GLOB_MARK );
		foreach( $files as $file ){
			if ( substr( $file, -1 ) == '/' )
				$this->delete_dir( $file );
			else
				unlink( $file );
		}

		rmdir( $dir );
	}

	private function fill_testdir( $dir ) {

		$number_files  = 10;
		$file_size_min = 100;
		$file_size_max = 1000;
		$file_pattern  = '%s/test_file_%d.txt';

		for ( $f = 0; $f<$number_files; $f++ ) {
			$number_bytes = rand( $file_size_min, $file_size_max );
			$filename = sprintf( $file_pattern, $this->testdir, $f );
			$handle = @fopen( $filename, 'w' );
			if ( $handle ) {
				$string = str_repeat( '#', $number_bytes );
				fwrite( $handle, $string );
				fclose( $handle );
			} else {
				echo 'Could not write testfile ' . $filename;
			}
		}
	}

    public function general_DataProvider() {
    	return array(
    		array( 'foo',      'some/path/to/badDir', false, 2 ),
    		array( 'empty',    'testdir', false, 1 ),
    		array( '',         'testdir', false, 3 ),
    		array( 'testfile', 'testdir', true, 0 ),
    	);
    }

    public function source_dir_DataProvider() {
    	return array(
    		array( 'some/path/to/badDir', false ),
    		array( 'testdir', 10 ),
    	);
    }

    public function target_DataProvider() {
    	return array(
    		array( 'badName', '' ),
    		array( 'testfile', 'testfile' ),
    	);
    }

    /**
     * @covers GalleryZip\Zipper\Zipper::create_tempdir()
     */
    public function testCreate_tempdir() {
    	$actual = $this->zipper->create_tempdir();
    	$this->assertTrue( $actual );
    }

    /**
     * @covers GalleryZip\Zipper\Zipper::check_source_dir()
     * @dataProvider  source_dir_DataProvider
     */
    public function testCheck_source_dir( $source, $expected ) {
		if ( 'testdir' === $source )
			$source = $this->testdir;

		$actual = sizeof( $this->zipper->check_source_dir( $source ) );
		$this->assertEquals( $expected, $actual );
    }

    /**
     * @covers GalleryZip\Zipper\Zipper::check_target()
     * @dataProvider target_DataProvider
     */
    public function testCheck_target( $target, $expected ) {
		if ( 'testfile' === $target )
			$target = $this->testfile;

		if ( 'testfile' === $expected )
			$expected = $this->testfile;

		$actual = $this->zipper->check_target( $target );

		$this->assertEquals( $expected, $actual );

    }

    /**
     * @covers GalleryZip\Zipper\Zipper::zip_dir()
     * @dataProvider general_DataProvider
     */
    public function testZip_dir( $target, $source, $expected, $expected_num_errors ) {
		if ( 'testdir' === $source )
			$source = $this->testdir;

		if ( 'testfile' === $target )
			$target = $this->testfile;

    	$actual = $this->zipper->zip_dir( $target, $source );
    	$actual_num_errors = sizeof( $this->zipper->get_errors() );

    	$this->assertEquals( $expected_num_errors, $actual_num_errors );
		$this->assertEquals( $expected, $actual );
    }

}
